name: Auto Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'

env:
  CARGO_TERM_COLOR: always

jobs:
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.version_check.outputs.changed }}
      new_version: ${{ steps.version_check.outputs.version }}
      should_release: ${{ steps.version_check.outputs.should_release }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check version change
      id: version_check
      run: |
        # 获取当前版本
        CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
        echo "Current version: $CURRENT_VERSION"
        
        # 检查是否已存在该版本的tag
        if git tag -l | grep -q "^v$CURRENT_VERSION$"; then
          echo "Tag v$CURRENT_VERSION already exists"
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "should_release=false" >> $GITHUB_OUTPUT
        else
          echo "New version detected: $CURRENT_VERSION"
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "should_release=true" >> $GITHUB_OUTPUT
        fi

  auto-release:
    name: Auto Release
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_release == 'true'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Configure cache
      uses: Swatinem/rust-cache@v2

    - name: Run tests
      run: cargo test --verbose

    - name: Build
      run: cargo build --release --verbose

    - name: Create and push tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ needs.check-version.outputs.new_version }}
        git push origin ${{ needs.check-version.outputs.new_version }}

    - name: Generate changelog
      id: changelog
      run: |
        # 获取上一个tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v ${{ needs.check-version.outputs.new_version }} | head -1)
        
        if [ -z "$PREVIOUS_TAG" ]; then
          # 如果没有之前的tag，获取所有提交
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          # 获取两个tag之间的提交
          CHANGELOG=$(git log ${PREVIOUS_TAG}..${{ needs.check-version.outputs.new_version }} --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        # 保存changelog到文件
        echo "## 🚀 RTK (Rust Toolkit) Release ${{ needs.check-version.outputs.new_version }}" > changelog.md
        echo "" >> changelog.md
        echo "### 📦 下载" >> changelog.md
        echo "" >> changelog.md
        echo "选择适合你操作系统的版本：" >> changelog.md
        echo "" >> changelog.md
        echo "- **Linux (x86_64)**: \`rtk-linux-x86_64.tar.gz\`" >> changelog.md
        echo "- **macOS (x86_64)**: \`rtk-macos-x86_64.tar.gz\`" >> changelog.md
        echo "- **macOS (ARM64)**: \`rtk-macos-aarch64.tar.gz\`" >> changelog.md
        echo "- **Windows (x86_64)**: \`rtk-windows-x86_64.zip\`" >> changelog.md
        echo "" >> changelog.md
        echo "### 🛠️ 安装方法" >> changelog.md
        echo "" >> changelog.md
        echo "#### Linux/macOS" >> changelog.md
        echo "\`\`\`bash" >> changelog.md
        echo "# 下载并解压" >> changelog.md
        echo "tar -xzf rtk-*.tar.gz" >> changelog.md
        echo "" >> changelog.md
        echo "# 移动到系统路径（可选）" >> changelog.md
        echo "sudo mv rtk /usr/local/bin/" >> changelog.md
        echo "" >> changelog.md
        echo "# 验证安装" >> changelog.md
        echo "rtk --version" >> changelog.md
        echo "\`\`\`" >> changelog.md
        echo "" >> changelog.md
        echo "#### Windows" >> changelog.md
        echo "\`\`\`powershell" >> changelog.md
        echo "# 解压 zip 文件" >> changelog.md
        echo "# 将 rtk.exe 添加到 PATH 环境变量" >> changelog.md
        echo "# 或直接运行" >> changelog.md
        echo ".\\rtk.exe --version" >> changelog.md
        echo "\`\`\`" >> changelog.md
        echo "" >> changelog.md
        echo "### ✨ 主要功能" >> changelog.md
        echo "" >> changelog.md
        echo "- 🔍 **文件操作**: 搜索、统计、重命名、重复检测" >> changelog.md
        echo "- 💻 **系统信息**: 系统监控、进程管理、资源统计" >> changelog.md
        echo "- 🌐 **网络工具**: HTTP请求、端口扫描、DNS查询" >> changelog.md
        echo "- 📝 **文本处理**: 搜索、替换、统计、排序" >> changelog.md
        echo "- 🔐 **加密工具**: 哈希计算、密码生成、编码解码" >> changelog.md
        echo "- 🕸️ **Web安全**: 目录扫描、漏洞检测、信息收集" >> changelog.md
        echo "" >> changelog.md
        
        if [ ! -z "$CHANGELOG" ]; then
          echo "### 📝 更新内容" >> changelog.md
          echo "" >> changelog.md
          echo "$CHANGELOG" >> changelog.md
          echo "" >> changelog.md
        fi
        
        echo "### 📖 使用指南" >> changelog.md
        echo "" >> changelog.md
        echo "\`\`\`bash" >> changelog.md
        echo "# 交互式模式" >> changelog.md
        echo "rtk" >> changelog.md
        echo "" >> changelog.md
        echo "# 直接命令模式" >> changelog.md
        echo "rtk system info" >> changelog.md
        echo "rtk network scan 192.168.1.1" >> changelog.md
        echo "rtk crypto password --length 20" >> changelog.md
        echo "\`\`\`" >> changelog.md
        echo "" >> changelog.md
        echo "更多详细信息请查看 [README.md](https://github.com/zhuima/rtk/blob/main/README.md)" >> changelog.md

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.check-version.outputs.new_version }}
        release_name: Release ${{ needs.check-version.outputs.new_version }}
        body_path: changelog.md
        draft: false
        prerelease: false

  trigger-build:
    name: Trigger Build Release
    needs: [check-version, auto-release]
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.should_release == 'true'
    steps:
    - name: Trigger release workflow
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: context.repo.owner,
            repo: context.repo.repo,
            workflow_id: 'release.yml',
            ref: 'main',
            inputs: {
              tag: '${{ needs.check-version.outputs.new_version }}'
            }
          });